(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{64:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return m}));var a=n(2),i=n(6),r=(n(0),n(83)),s={id:"new_style_classes",title:"Creating a new style class"},l={unversionedId:"new_style_classes",id:"new_style_classes",isDocsHomePage:!1,title:"Creating a new style class",description:"New classes are created in the 'src' folder according to the scheme NAME.template.ts",source:"@site/docs\\new_style_classes.md",slug:"/new_style_classes",permalink:"/docs/new_style_classes",editUrl:"https://github.com/josunlp/Social-graphics-library/edit/master/website/docs/new_style_classes.md",version:"current",sidebar:"someSidebar",previous:{title:"Basic generation",permalink:"/docs/"},next:{title:"Calling multible generations",permalink:"/docs/multi_calls"}},c=[{value:"The structure",id:"the-structure",children:[]},{value:"The integration",id:"the-integration",children:[]}],o={rightToc:c};function m(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"New classes are created in the 'src' folder according to the scheme NAME.template.ts"),Object(r.b)("hr",null),Object(r.b)("h2",{id:"the-structure"},"The structure"),Object(r.b)("p",null,"Within the SVG, the corresponding text entries for names and / or team names are replaced by the JS variables."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"\nexport class Twitch_Template {\n\n    static width = 1920;\n    static height = 480;\n\n    static template(teamName: string, playerName:string): string {\n\n        return '<svg></svg>';\n\n    }\n}\n\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"the-integration"},"The integration"),Object(r.b)("p",null,"The new class is integrated in the ",Object(r.b)("inlineCode",{parentName:"p"},"generator")," method in the",Object(r.b)("inlineCode",{parentName:"p"},"SocialGraphicsLibrary")," as a ",Object(r.b)("inlineCode",{parentName:"p"},"case")," in the ",Object(r.b)("inlineCode",{parentName:"p"},"glc.ts")," file."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'\npublic static generator(teamName: string, playerName:string, mode: string, containerId: string, imgMode: string): void {\n        let svgString: string;\n        let width: number;\n        let height: number;\n\n        if (teamName === "" ) {\n            teamName = "Community";\n        }\n\n        if (playerName === "") {\n            playerName = "Player";\n        }\n\n        switch (mode) {\n            case \'youtube-title\':\n                svgString = Youtube_Template.template(teamName, playerName);\n                width = Youtube_Template.width;\n                height = Youtube_Template.height;\n                break;\n\n------------------------------------------------------------------------------\n Here ->\n\n\n------------------------------------------------------------------------------\n\n            default:\n                svgString = False_Template.template();\n                width = False_Template.width;\n                height = False_Template.height;\n                break;\n        }\n\n        this.printImage(svgString, width, height, containerId, imgMode);\n\n    }\n\n')))}m.isMDXComponent=!0}}]);